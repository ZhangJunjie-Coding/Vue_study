{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MyHeader from \"./components/MyHeader\";\nimport MyList from \"./components/MyList\";\nimport MyFooter from \"./components/MyFooter\";\nexport default {\n  name: \"App\",\n  components: {\n    MyHeader: MyHeader,\n    MyList: MyList,\n    MyFooter: MyFooter\n  },\n  data: function data() {\n    return {\n      todos: [{\n        id: \"001\",\n        title: \"抽烟\",\n        done: true\n      }, {\n        id: \"002\",\n        title: \"喝酒\",\n        done: false\n      }, {\n        id: \"003\",\n        title: \"开车\",\n        done: true\n      }]\n    };\n  },\n  methods: {\n    //添加一个todo\n    addTodo: function addTodo(todoObj) {\n      this.todos.unshift(todoObj);\n    },\n    //勾选or取消勾选一个todo\n    checkTodo: function checkTodo(id) {\n      this.todos.forEach(function (todo) {\n        if (todo.id === id) todo.done = !todo.done;\n      });\n    },\n    //删除一个todo\n    deleteTodo: function deleteTodo(id) {\n      this.todos = this.todos.filter(function (todo) {\n        return todo.id !== id;\n      });\n    },\n    //全选/取消全选\n    checkAllTodo: function checkAllTodo(done) {\n      this.todos.forEach(function (element) {\n        element.done = done;\n      });\n    },\n    //清除所有已经完成的todo\n    clearAllTodo: function clearAllTodo() {\n      this.todos = this.todos.filter(function (todo) {\n        return !todo.done;\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.$bus.$on();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AAEA;EACAA,WADA;EAGAC;IACAC,kBADA;IAEAC,cAFA;IAGAC;EAHA,CAHA;EAQAC,IARA,kBAQA;IACA;MACAC,QACA;QAAAC;QAAAC;QAAAC;MAAA,CADA,EAEA;QAAAF;QAAAC;QAAAC;MAAA,CAFA,EAGA;QAAAF;QAAAC;QAAAC;MAAA,CAHA;IADA;EAOA,CAhBA;EAiBAC;IACA;IACAC,OAFA,mBAEAC,OAFA,EAEA;MACA;IACA,CAJA;IAKA;IACAC,SANA,qBAMAN,EANA,EAMA;MACA;QACA;MACA,CAFA;IAGA,CAVA;IAWA;IACAO,UAZA,sBAYAP,EAZA,EAYA;MACA;QACA;MACA,CAFA;IAGA,CAhBA;IAiBA;IACAQ,YAlBA,wBAkBAN,IAlBA,EAkBA;MACA;QACAO;MACA,CAFA;IAIA,CAvBA;IAwBA;IACAC,YAzBA,0BAyBA;MACA;QACA;MACA,CAFA;IAGA;EA7BA,CAjBA;EAiDAC,OAjDA,qBAiDA;IACA;EACA;AAnDA","names":["name","components","MyHeader","MyList","MyFooter","data","todos","id","title","done","methods","addTodo","todoObj","checkTodo","deleteTodo","checkAllTodo","element","clearAllTodo","mounted"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<!-- \r\n  总结ToList案例\r\n  1.组件化编码流程：\r\n    （1）。拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突\r\n    （2）。实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用\r\n        1）一个组件在用：放在组件自身即可\r\n        2）一些组件在用：放在它们共同的父组件上（状态提升）\r\n    （3）实现交互：从绑定事件开始。\r\n\r\n  2.props适用于：\r\n      （1）父组件===>子组件 通信\r\n      （2）子组件===>父组件 通信（要求父先给子一个函数）\r\n 3.使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可修改的！\r\n\r\n 4.props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做\r\n\r\n\r\n\r\n -->\r\n<template>\r\n  <div id=\"root\">\r\n    <div class=\"todo-container\">\r\n      <div class=\"todo-wrap\">\r\n        <MyHeader @addTodo=\"addTodo\"></MyHeader>\r\n        <MyList :todos=\"todos\"></MyList>\r\n        <MyFooter :todos=\"todos\" @checkAllTodo=\"checkAllTodo\" @clearAllTodo=\"clearAllTodo\"></MyFooter>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MyHeader from \"./components/MyHeader\";\r\nimport MyList from \"./components/MyList\";\r\nimport MyFooter from \"./components/MyFooter\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n\r\n  components: {\r\n    MyHeader,\r\n    MyList,\r\n    MyFooter,\r\n  },\r\n  data() {\r\n    return {\r\n      todos: [\r\n        { id: \"001\", title: \"抽烟\", done: true },\r\n        { id: \"002\", title: \"喝酒\", done: false },\r\n        { id: \"003\", title: \"开车\", done: true },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    //添加一个todo\r\n    addTodo(todoObj){\r\n      this.todos.unshift(todoObj)\r\n    },\r\n    //勾选or取消勾选一个todo\r\n    checkTodo(id){\r\n      this.todos.forEach((todo)=>{\r\n        if(todo.id === id) todo.done = !todo.done\r\n      })\r\n    },\r\n    //删除一个todo\r\n    deleteTodo(id){\r\n      this.todos = this.todos.filter((todo)=>{\r\n        return todo.id !== id\r\n      })\r\n    },\r\n    //全选/取消全选\r\n    checkAllTodo(done){\r\n      this.todos.forEach(element=>{\r\n        element.done = done;\r\n      })\r\n\r\n    },\r\n    //清除所有已经完成的todo\r\n    clearAllTodo(){\r\n      this.todos = this.todos.filter(todo=>{\r\n        return !todo.done\r\n      })\r\n    }\r\n\r\n  },\r\n  mounted() {\r\n    this.$bus.$on()\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/*base*/\r\nbody {\r\n  background: #fff;\r\n}\r\n\r\n.btn {\r\n  display: inline-block;\r\n  padding: 4px 12px;\r\n  margin-bottom: 0;\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2),\r\n    0 1px 2px rgba(0, 0, 0, 0.05);\r\n  border-radius: 4px;\r\n}\r\n\r\n.btn-danger {\r\n  color: #fff;\r\n  background-color: #da4f49;\r\n  border: 1px solid #bd362f;\r\n}\r\n\r\n.btn-danger:hover {\r\n  color: #fff;\r\n  background-color: #bd362f;\r\n}\r\n\r\n.btn:focus {\r\n  outline: none;\r\n}\r\n\r\n.todo-container {\r\n  width: 600px;\r\n  margin: 0 auto;\r\n}\r\n.todo-container .todo-wrap {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}